/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include "keymap_french_osx.h"

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

#define _DK_GRAVE LS(_DK_ACUTE)  //

&mt {
    tapping-term-ms = <400>;
};


&spi1 {
   compatible = "nordic,nrf-spim";
  /* Cannot be used together with i2c0. */
   status = "okay";
   mosi-pin = <6>;
   // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
   sck-pin = <5>;
   miso-pin = <7>;

   led_strip: ws2812@0 {
      compatible = "worldsemi,ws2812-spi";
      label = "SK6812mini";

      /* SPI */
      reg = <0>; /* ignored, but necessary for SPI bindings */
      spi-max-frequency = <4000000>;

      /* WS2812 */
      chain-length = <27>; /* There are per-key RGB, but the first 6 are underglow */
      spi-one-frame = <0x70>;
      spi-zero-frame = <0x40>;
   };
};

/ {
   chosen {
      zmk,underglow = &led_strip;
   };
};


/ {

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | RSE/ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  | "|"  |
// | SHFT/TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  |  '   |
// | CTRL     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  |  -   |
//                        | GUI | LWR | SPC |   | ENT | LWR  | BKSP |
                        bindings = <
   &lt RAISE ESC &kp Q    &kp W     &kp E      &kp R      &kp T      &kp Y     &kp U     &kp I     &kp O   &kp P    &kp PIPE
   &mt LSHFT TAB &kp A    &kp S     &kp D      &kp F      &kp G      &kp H     &kp J     &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL     &kp Z    &kp X     &kp C      &kp V      &kp B      &kp N     &kp M     &kp COMMA &kp DOT &kp FSLH &kp MINUS
                                    &kp LGUI   &mo LOWER  &kp SPACE  &kp RET   &mo LOWER &kp BSPC
                        >;

                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | ADJUST   |  !  |  @  |  {  |  }  |  |  |   |  ¨  |  ´  |  ^  |  `  |     |  \  |
// | SHFT/TAB |  #  |  $  |  (  |  )  |  `  |   |  +  |  -  |  /  |  *  |  %  |  '  |
// | CTRL     |  %  |  ^  |  [  |  ]  |  ~  |   |  &  |  =  |  ,  |  .  |  /  |  -  |
//                        | ALT |     |     |   |     |     | DEL |
                        bindings = <
   &mo ADJUST &kp EXCL  &kp AT      &kp LBRC  &kp RBRC  &kp PIPE        &kp FR_DIAE &kp FR_ACUT &kp FR_CIRC &kp FR_GRV      &trans     &kp BACKSLASH
   &kp LSHFT  &kp HASH  &kp DLLR    &kp LPAR  &kp RPAR  &kp FR_GRV      &kp PLUS    &kp MINUS   &kp FSLH    &kp KP_MULTIPLY &kp PRCNT  &kp SQT
   &kp LCTRL  &kp PRCNT &kp FR_CIRC &kp LBKT  &kp RBKT  &kp FR_TILD     &kp AMPS    &kp EQUAL   &kp COMMA   &kp DOT         &kp FSLH   &kp MINUS
                                    &kp LALT  &trans    &trans          &trans      &trans      &kp DEL
                        >;
                };
                
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  |  1  |  2   |  3   |  4   |  5    |   |  6    |  7  |  8     |  9     |  0     |  |
// |  |     | Prev | Play | Next | VolUp |   | PG_UP | LFT | DWN    |  UP    | RGT    |  |
// |  |     |      |      | Mute | VolDn |   | PG_DN |     | BT_PRV | BT_NXT | BT_CLR |  |
//                 |      |      |       |   |       |     |        |
                        bindings = <
   &trans  &kp N1 &kp N2         &kp N3           &kp N4     &kp N5            &kp N6      &kp N7    &kp N8      &kp N9     &kp N0     &trans
   &trans  &trans &kp C_PREVIOUS &kp C_PLAY_PAUSE &kp C_NEXT &kp C_VOLUME_UP   &kp PG_UP   &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT  &trans
   &trans  &trans &trans         &trans           &kp C_MUTE &kp C_VOLUME_DOWN &kp PG_DN   &trans    &bt BT_PRV  &bt BT_NXT &bt BT_CLR &trans
                                 &trans           &trans     &trans            &trans      &trans    &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// |  | F1      | F2      | F3      | F4      | F5      |   | F6      | F7      | F8      | F9      | F10     | F11 |
// |  | RGB_TOG | RGB_SAI | RGB_HUI | RGB_BRI | RGB_EFF |   | RGB_TOG | RGB_SAI | RGB_HUI | RGB_BRI | RGB_EFF | F12 |
// |  |         | RGB_SAD | RGB_HUD | RGB_BRD | RGB_EFR |   |         | RGB_SAD | RGB_HUD | RGB_BRD | RGB_EFR |     |
//                        |         |         |         |   |         |         |         |
                        bindings = <
   &trans  &kp F1          &kp F2          &kp F3          &kp F4          &kp F5           &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11
   &trans  &ext_power EP_TOG &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_EFF  &rgb_ug RGB_TOG &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_EFF &kp F12
   &trans  &trans          &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFR  &trans          &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFR &trans
                                           &trans          &trans          &trans           &trans          &trans          &trans
                        >;
                };
        };
};
